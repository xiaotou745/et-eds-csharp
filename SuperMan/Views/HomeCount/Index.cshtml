@model ETS.Data.PageData.PageInfo<Ets.Model.Common.HomeCountTitleModel>
@{
    ViewBag.Title = "后台统计";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
@using ETS.Util;
<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-ui-1.8.20.js"></script>
<script src="~/Scripts/jquery.ui.datepicker-zh-CN.js"></script>
<h3 style="color:black;font-weight:600">今日数据统计</h3>
<style type="text/css">
    .trclass {
       text-align:left;
       line-height:35px;
       padding:15px;
       width:auto;
       min-width:800px;
    }

    .trclass  td {
        padding-left:15px;
        width:225px;
    }
</style>
<div>
    @{
        var resultList = ViewBag.homeCountTitleModel as Ets.Model.Common.HomeCountTitleModel;
        var homeCountByList=ViewBag.homeCountTitleToList;
        var clienteStorerGrabStatisticalList = ViewBag.clienteStorerGrabStatistical as List<Ets.Model.DomainModel.Bussiness.BusinessesDistributionModel>;
        var homeCountAllData = ViewBag.homeCountTitleToAllData as Ets.Model.Common.HomeCountTitleModel;
        <p>
            <table class="tbstyle" width="1200" border="1">
                <tr class="trclass">
                    <td width="150">
                        商家总数：@ParseHelper.ToSplitByPercentile(true, resultList.BusinessCount)<br />
                        已认证骑士数量：@ParseHelper.ToSplitByPercentile(true, resultList.RzqsCount) <br />
                        待认证骑士数量：@ParseHelper.ToSplitByPercentile(true, resultList.DdrzqsCount)  <br />
                        今日活跃商家数：@ParseHelper.ToSplitByPercentile(true, resultList.ActiveBusiness)<br />
                        今日活跃骑士数：@ParseHelper.ToSplitByPercentile(true, resultList.ActiveClienter)<br />
                    </td>
                    <td>
                        总任务量：@ParseHelper.ToSplitByPercentile(true, resultList.MisstionCount)<br />
                        未被抢任务量：@ParseHelper.ToSplitByPercentile(true, resultList.UnGrabMissionCount)<br />
                        未完成任务量：@ParseHelper.ToSplitByPercentile(true, resultList.UnfinishedMissionCount)<br />
                        总订单量：@ParseHelper.ToSplitByPercentile(true, resultList.OrderCount)<br />
                        任务平均订单量：@resultList.MissionAverageOrderCount  <br />
                    </td>
                    <td>
                        订单总金额：@ParseHelper.ToSplitByPercentile(false, resultList.OrderPrice)<br />
                        客单价：@(resultList.OrderCount == 0 ? "0" : (resultList.OrderPrice / resultList.OrderCount).ToString("f2")) <br />
                        任务单价：@(resultList.MisstionCount == 0 ? "0" : (resultList.OrderPrice / resultList.MisstionCount).ToString("f2"))<br />
                        跨店抢单奖励:@(resultList.CrossShopPrice == 0 ? "0" : resultList.CrossShopPrice.ToString("f2"))<br />
                    </td>
                    <td>
                        0次补贴被抢任务：@ParseHelper.ToSplitByPercentile(true, resultList.ZeroSubsidyOrderCount)<br />
                        1次补贴被抢任务：@ParseHelper.ToSplitByPercentile(true, resultList.OneSubsidyOrderCount)<br />
                        2次补贴被抢任务：@ParseHelper.ToSplitByPercentile(true, resultList.TwoSubsidyOrderCount)<br />
                        3次补贴被抢任务：@ParseHelper.ToSplitByPercentile(true, resultList.ThreeSubsidyOrderCount)<br />
                    </td>
                    <td>
                        商户平均发布任务：@ParseHelper.ToDivision(resultList.MisstionCount, resultList.ActiveBusiness)<br />
                        商户平均发布订单：@ParseHelper.ToDivision(resultList.OrderCount,resultList.ActiveBusiness)  <br />
                        骑士平均完成任务：@ParseHelper.ToDivision(resultList.MisstionCount, resultList.ActiveClienter)<br />
                        骑士平均完成订单：@ParseHelper.ToDivision(resultList.OrderCount, resultList.ActiveClienter)  <br />
                    </td>
                    <td>
                        骑士平均佣金：@ParseHelper.ToDivision(ParseHelper.ToDouble(resultList.YfPrice), resultList.ActiveClienter)  <br />
                        任务平均佣金：@ParseHelper.ToDivision(ParseHelper.ToDouble(resultList.YfPrice), resultList.MisstionCount)<br />
                        订单平均佣金：@ParseHelper.ToDivision(ParseHelper.ToDouble(resultList.YfPrice), resultList.OrderCount)<br />
                    </td>
                    <td>
                        商户结算金额（应收）：￥@ParseHelper.ToSplitByPercentile(false, resultList.YsPrice)<br />
                        骑士佣金总计（应付）：￥@ParseHelper.ToSplitByPercentile(false, resultList.YfPrice)<br />
                        @{
                            decimal ykPrice = resultList.YkPrice;
                            string ykStyle = ykPrice > 0 ? "red" : "green";
                        }
                        盈亏总计：￥<span style="color:@ykStyle">@ParseHelper.ToSplitByPercentile(false, resultList.YkPrice)</span><br />
                    </td>
                   
                </tr>
            </table>
        </p>
    }
</div>
<hr />
<h3 style="color:black;font-weight:600">总数据统计</h3>
<div>
    <p>
        <table class="tbstyle" width="1200" border="1">
            <tr class="trclass">
                <td>总任务量</td>
                <td>总订单量</td>
                <td>总订单金额</td>
                <td>总商户结算金额（应收)</td>
                <td>总骑士佣金总计（应付)</td>
                <td>可提现佣金总计</td>
                <td>客单价</td>
                <td>任务单价</td>
                <td>跨店抢单奖励</td>
                <td>总盈亏总计</td>
            </tr>

            @{
                double ykAllPirce = (double)Math.Round(homeCountAllData.YsPrice - homeCountAllData.YfPrice, 2);
                string ykAllStyle = ykAllPirce > 0 ? "red" : "green";
                <tr class="trclass">
                    <td>@ParseHelper.ToSplitByPercentile(true,homeCountAllData.MisstionCount)</td>
                    <td>@ParseHelper.ToSplitByPercentile(true,homeCountAllData.OrderCount)</td>
                    <td>@ParseHelper.ToSplitByPercentile(false,homeCountAllData.OrderPrice)</td>
                    <td>￥@ParseHelper.ToSplitByPercentile(false,Math.Round(homeCountAllData.YsPrice, 2))</td>
                    <td>￥@ParseHelper.ToSplitByPercentile(false,Math.Round(homeCountAllData.YfPrice, 2))</td>
                    <td>￥@ParseHelper.ToSplitByPercentile(false,Math.Round(homeCountAllData.WithdrawPrice, 2))</td>
                    <td>@ParseHelper.ToSplitByPercentile(false,((homeCountAllData.OrderPrice / homeCountAllData.OrderCount).ToString("f2")))</td>
                    <td>@ParseHelper.ToSplitByPercentile(false,((homeCountAllData.OrderPrice / homeCountAllData.MisstionCount).ToString("f2")))</td>
                    <td>@ParseHelper.ToSplitByPercentile(false, Math.Round(homeCountAllData.CrossShopPrice, 2))</td>
                    <td>￥<span style="color:@ykAllStyle">@ParseHelper.ToSplitByPercentile(false,ykAllPirce)</span></td>
                </tr>
            }
        </table>
    </p>

    <hr />
    <h3 style="color:black;font-weight:600">跨店抢单骑士统计</h3>
    
    @*<h3 style="color:black;font-weight:600">最近20天数据统计</h3>*@
    <div>
        <p>
            <table class="tbstyle" border="1" width="1200">
                <tr class="trclass">
                    <td>日期</td>
                    <td>跨店奖励金额</td>
                    <td>跨1个店骑士/奖励</td>
                    <td>2个/奖励</td>
                    <td>3个/奖励</td>
                    <td>4个/奖励</td>
                    <td>5个/奖励</td>
                    <td>6个/奖励</td>
                    <td>7个/奖励</td>
                    <td>8个/奖励</td>
                    <td>9个/奖励</td>
                    <td>>=10个</td>
                </tr>

                @{
                    var tempList= from S in clienteStorerGrabStatisticalList 
                                  group S by  S.InsertTime into item
                                  select new {
                                      PubDate = item.First().InsertTime.ToString(),
                                      PubDateTotalAmount = item.Sum(t=>t.TotalAmount).ToString(),
                                      OnceView = item.Where(t => t.BusinessCount == 1).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 1).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 1).First().Amount,
                                      TwiceView = item.Where(t => t.BusinessCount == 2).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 2).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 2).First().Amount,
                                      ThreeView = item.Where(t => t.BusinessCount == 3).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 3).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 3).First().Amount,
                                      FourView = item.Where(t => t.BusinessCount == 4).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 4).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 4).First().Amount,
                                      FiveView = item.Where(t => t.BusinessCount == 5).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 5).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 5).First().Amount,
                                      SixView = item.Where(t => t.BusinessCount == 6).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 6).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 6).First().Amount,
                                      SevenView = item.Where(t => t.BusinessCount == 7).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 7).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 7).First().Amount,
                                      EightView = item.Where(t => t.BusinessCount == 8).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 8).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 8).First().Amount,
                                      NineView = item.Where(t => t.BusinessCount == 9).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount == 9).First().ClienterCount + "*" + item.Where(t => t.BusinessCount == 9).First().Amount,
                                      ExceedView = item.Where(t => t.BusinessCount >= 10).Count() == 0 ? "0*0" : item.Where(t => t.BusinessCount >= 10).First().ClienterCount + "*" + item.Where(t => t.BusinessCount >= 10).First().Amount,
                                  };

                    foreach (var item in tempList)
                    {
                        <tr class="trclass">
                            <td>@item.PubDate</td>
                            <td>@item.PubDateTotalAmount</td>
                            <td>@item.OnceView</td>
                            <td>@item.TwiceView</td>
                            <td>@item.ThreeView</td>
                            <td>@item.FourView</td>
                            <td>@item.FiveView</td>
                            <td>@item.SixView</td>
                            <td>@item.SevenView</td>
                            <td>@item.EightView</td>
                            <td>@item.NineView</td>
                            <td>@item.ExceedView</td>
                        </tr>
                    }
                }
            </table>
        </p>

        <hr />



        @*<h3 style="color:black;font-weight:600">最近20天数据统计</h3>*@
        <div>
            <p>
                @using (Ajax.BeginForm("PostIndex", new RouteValueDictionary { { "pageindex", "" } },
            new AjaxOptions { UpdateTargetId = "dataList", InsertionMode = InsertionMode.Replace },
            new RouteValueDictionary { { "id", "searchForm" } }))
                {
                    <div class="SearchMd" style="padding:0">
                        <h3 style="color:black;font-weight:600">每天数据统计</h3>
                        <input id="txtOrderPubStart" readonly="readonly" type="text" name="orderPubStart" />
                        <span class="">到: </span>
                        <input id="txtOrderPubEnd" readonly="readonly" type="text" name="orderPubEnd" />
                        <input type="submit" value="查询" class="searchBtn" id="btnSearch" /><br /><br />
                    </div>
                }
                <script type="text/javascript" src="/Scripts/jquery.unobtrusive-ajax.min.js"></script>
                <div class="bd clearfix" id="dataList" style="width:100%">
                    @Html.Partial("_PartialIndex", Model)
                </div>

            </p>
        </div>
    </div>
    
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('#txtOrderPubStart').datepicker();
        $('#txtOrderPubEnd').datepicker();
        window.location.hash = '';
    });
    
</script>
<script src="~/Scripts/mvcpager.js"></script>