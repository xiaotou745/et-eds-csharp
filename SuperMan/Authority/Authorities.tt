<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml" #>
<#@ output extension=".cs" #>
<# 
	var APPLICATION_NAME = "GroupAdministration"; 

	IServiceProvider serviceProvider = (IServiceProvider)this.Host;
	EnvDTE.DTE dte = (EnvDTE.DTE) serviceProvider.GetService(typeof(EnvDTE.DTE));

	EnvDTE.SelectedItem selectedItem = null;
	foreach(EnvDTE.SelectedItem item in dte.SelectedItems){
		if(item.ProjectItem.FileNames[1] == this.Host.TemplateFile){
			selectedItem = item;
			break;
		}
	}
	if(selectedItem == null){
		Error("Can't find the TextTemplate file to transform.");
	}

	var ownerProject = selectedItem.ProjectItem.ContainingProject;
	var PROJECT_NAMESPACE = ownerProject.Properties.Item("DefaultNamespace").Value;

	XmlDocument doc = new XmlDocument();
	doc.Load(this.Host.ResolvePath("Authorities.config"));
	var authorityNodes = doc.SelectNodes("/configuration/authorities/authority");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using SuperManCommonModel;
namespace <#=PROJECT_NAMESPACE#>
{
	public sealed class AuthorityItem
    {
        public AuthorityItem(string name, AuthorityType authorityType)
        {
            this.Name = name;
            this.AuthorityType = authorityType;
        }

        public string Name { get; private set; }
        public AuthorityType AuthorityType { get; private set; }
    }

	public sealed class AuthorityNames
	{
		<#
			for (int i = 0; i < authorityNodes.Count; i++)
			{
				var node = authorityNodes[i];
		#>

		public const string <#=node.Attributes["key"].Value#> = "<#=node.Attributes["name"].Value#>";
		<#
			}
		#>

	}

	public sealed class Authorities
	{
		<#
			for (int i = 0; i < authorityNodes.Count; i++)
			{
				var node = authorityNodes[i];
		#>

		public AuthorityItem <#=node.Attributes["key"].Value#> = new AuthorityItem( AuthorityNames.<#=node.Attributes["key"].Value#>,(AuthorityType)<#=node.Attributes["authorityType"].Value#>);		
		<#
			}
		#>

	}

	public static class DefaultAuthoritiesForGallery
    {
        private static List<string> defaultAuthorities = new List<string>();
        static DefaultAuthoritiesForGallery()
        {
		<#
			for (int i = 0; i < authorityNodes.Count; i++)
			{
				var node = authorityNodes[i];
		 
					var isDefaultAuthority =  node.Attributes["isDefaultAuthority"].Value;

					if(isDefaultAuthority == "true")
					{
				#>
				defaultAuthorities.Add(AuthorityNames.<#=node.Attributes["key"].Value#>);
				<#	
					} 
			}
		#>
        }
        public static List<string> DefaultAuthorities
        {
            get
            {
                return defaultAuthorities;
            }
        }
    }
}